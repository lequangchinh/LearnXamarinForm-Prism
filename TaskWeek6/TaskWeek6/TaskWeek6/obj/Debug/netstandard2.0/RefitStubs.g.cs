// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Text;
using Refit;
using System.Threading.Tasks;
using System.Collections.ObjectModel;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace TaskWeek6.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace TaskWeek6.ViewModels
{
    using TaskWeek6.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIPhotoAPI : IPhotoAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIPhotoAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ObservableCollection<ImageView>> IPhotoAPI.GetListImage(string albumId)
        {
            var arguments = new object[] { albumId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListImage", new Type[] { typeof(string) });
            return (Task<ObservableCollection<ImageView>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ImageView> IPhotoAPI.GetImage(string Id)
        {
            var arguments = new object[] { Id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetImage", new Type[] { typeof(string) });
            return (Task<ImageView>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<User> IPhotoAPI.GetUser(string userID)
        {
            var arguments = new object[] { userID };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", new Type[] { typeof(string) });
            return (Task<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<User>> IPhotoAPI.GetUsers()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUsers", new Type[] {  });
            return (Task<List<User>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<AlbumsPhoto>> IPhotoAPI.GetAlbums(string userID)
        {
            var arguments = new object[] { userID };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAlbums", new Type[] { typeof(string) });
            return (Task<List<AlbumsPhoto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<AlbumsPhoto> IPhotoAPI.GetAlbum(string albumID)
        {
            var arguments = new object[] { albumID };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAlbum", new Type[] { typeof(string) });
            return (Task<AlbumsPhoto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Post>> IPhotoAPI.GetPosts()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetPosts", new Type[] {  });
            return (Task<List<Post>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Comment>> IPhotoAPI.GetComments(string postId)
        {
            var arguments = new object[] { postId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetComments", new Type[] { typeof(string) });
            return (Task<List<Comment>>)func(Client, arguments);
        }
    }
}
